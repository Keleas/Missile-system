@startuml

actor Compositor order 10

note right of Compositor
    Некая программная сущность,
    которая генерирует идентификаторы 
    всех объектов, инициирует служебные объекты
    и все модели.
    Может быть частью гуя.
end note 

== Initialization ==

create MsgChannelCarrier order 15
Compositor -> MsgChannelCarrier : New

create ModelingDispatcher order 20
Compositor -> ModelingDispatcher : New

note right of ModelingDispatcher
    Может быть частью Compositor
end note

Compositor -> Compositor : Generate IDs

loop for each model
    create Model order 30
    Compositor -> Model : New(id, MsgChannelCarrier)
    note right of Compositor : Тут также передаются исходные данные модели
    loop for each MsgType
        Model -> Model : declareteQueue(queue, id)
    end loop
    Compositor -> ModelingDispatcher : addModel(model, id)
end loop

== Modeling ==

Compositor -> ModelingDispatcher : start(max_time)
activate ModelingDispatcher

loop for each model
    ModelingDispatcher -> Model : firstStep()
    activate Model
    ref over Model : Send messages
    return done
end loop

loop till then end of modeling
    loop for each model
        ModelingDispatcher -> Model : step(delta_time)
        activate Model
        Model -> Model : Process queue and do modeling step
        ref over Model : Send messages
        return done
    end loop
end loop
return done

== Results ==

Compositor -> ModelingDispatcher : Get results
activate ModelingDispatcher
loop for each model
    ModelingDispatcher -> Model : Get results 
    activate Model
    return results 
end loop
note over MsgChannelCarrier
    Необходимо определиться с единым форматом
    результатов и способом их хранения 
end note
return results

== Destruction ==

Compositor -> ModelingDispatcher ++ : delete
loop for each model
    ModelingDispatcher -> Model !! : delete
end loop
destroy ModelingDispatcher

Compositor -> MsgChannelCarrier !! : delete

@enduml