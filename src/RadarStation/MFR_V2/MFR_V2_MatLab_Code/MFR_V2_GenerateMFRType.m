function MFR = MFR_V2_GenerateMFRType(...
    Loc,...
    n,...
    lambda,... = 0.0300
    Dmax,... = 100000
    Dmin,... = 8.2443e+03
    Tscan,... = 6.6713e-04
    Timp,... = 5.0000e-05
    V_res,... = 20
    asim_res,... = 0.0213
    elev_res,... = 0.0152
    asim_res_trace_cf,... = 0.1000
    elev_res_trace_cf,... = 0.1000
    elev1,... = 0
    elev2,... =0.5236
    Nasim,... = 297
    Nelev,... = 35
    Bandwidth,... = 400000
    Noise,... = 1.7617e-15
    Gain,... = 3.1056e+04
    P_peak,... = 1.2146e+07
    Tr,... = 6
    Ntraj,... = 64
    Nmissiles... = 64
    ) %#codegen

    n=normalize(n,2,'norm');
    e = zeros(size(n));
    if ~n(2)
        e(1)=n(3);
        e(3)=-n(1);
    else
        e(1)=n(2);
        e(2)=-n(1);
    end
    e=normalize(e,2,'norm');
    
    MFR = struct('lambda',lambda, ...
                 'Dmax', Dmax, ...
                 'Dmin', Dmin, ...
                 'Tscan', Tscan, ...
                 'Timp', Timp, ...
                 'V_res', V_res, ...
                 'asim_res', asim_res, ...
                 'elev_res', elev_res, ...
                 'asim_res_trace_cf', asim_res_trace_cf, ...
                 'elev_res_trace_cf', elev_res_trace_cf, ...
                 'elev1', min([elev1 elev2]), ...
                 'elev2', max([elev1 elev2]), ...
                 'Nasim', Nasim, ... %amount of asimuth points
                 'Nelev', Nelev, ...  %amount of angle of elevation points
                 'Bandwidth', Bandwidth, ...
                 'Noise', Noise, ...
                 'Gain', Gain, ...
                 'P_peak', P_peak, ...
                 'Tr', Tr, ...
                 'Ntraj', Ntraj, ... %Number of traceable trajectories
                 'Nmissiles', Nmissiles, ...
                 'n', n, ...
                 'e', e, ...
                 'p', cross(n,e), ...
                 'Loc',  Loc,... Radar location
                 ... Later use for scanning parametres:
                 'A',zeros(3), ...
                 'elev', [], ...
                 'asim', [], ...
                 'ed', [], ...
                 'ee', [], ...
                 'ea', [], ...
                 'tsc', 0, ...
                 'pos', 1, ...
                 'posN', 0, ...
                 'tge', 0, ...
                 'tga', 0, ...
                 'Pc', 0, ...
                 'tgID', [], ...
                 'tgIDprev', []); 
    %save('MFR.mat','MFR');
    %disp(MFR);
    coder.varsize('MFR.elev');
    coder.varsize('MFR.asim');
    coder.varsize('MFR.ed');
    coder.varsize('MFR.ee');
    coder.varsize('MFR.ea');
    coder.varsize('MFR.tgID');
    coder.varsize('MFR.tgIDprev');
    
    %Calculation of coord transition matrix LOCXYZ->GLOBXYZ
    MFR.A = inv([MFR.e' MFR.p' MFR.n'])';
    %Asimuth and elevation angles
    elev = linspace(MFR.elev1 + MFR.elev_res/2,...
                    MFR.elev2 - MFR.elev_res/2,...
                    MFR.Nelev)';
    asim = linspace(0,2*pi,MFR.Nasim+1);
    asim = asim(1:end-1);
    MFR.elev = repmat(elev,1,length(asim)); %MFR - scanning pattern

    for n=2:2:length(asim)
        MFR.elev(:,n) = flip(MFR.elev(:,n));
    end
    MFR.asim = repmat(asim,length(elev),1);
    MFR.elev = MFR.elev(:);
    MFR.asim = MFR.asim(:);
    MFR.ed = [cos(MFR.elev).*cos(MFR.asim),...
              cos(MFR.elev).*sin(MFR.asim),...
              sin(MFR.elev)]*MFR.A;
    MFR.ee = [MFR.ed(:,1),...
              MFR.ed(:,2),...
              -( MFR.ed(:,1).^2 + MFR.ed(:,2).^2 )./MFR.ed(:,3)] *MFR.A;
    MFR.ee = normalize(MFR.ee,2,'norm');
    MFR.ea = cross(MFR.ed,MFR.ee,2);
    %Scan start
    MFR.tsc = 0; %Current scan time deviation
    MFR.pos = 1; %Current scan vector number (correlates with .tsc)
    MFR.posN = length(MFR.asim); %number of positions
    %Scan parametres
    MFR.tge = tan(MFR.elev_res/2);
    MFR.tga = tan(MFR.asim_res/2);
    MFR.Pc = MFR.P_peak*MFR.Timp*(MFR.Gain*MFR.lambda)^2/(4*pi)^3/MFR.Noise;
    %Scan output
    MFR.tgID = zeros([MFR.Ntraj 1]);
    MFR.tgIDprev = [];
end
